updates







import roman
import re

async def download_NH_input(url, base_url, title, download, collection_path):
    """Download and process NH legal statutes and store in MongoDB"""

    # Define and create the collection path
    collection_path = os.path.join(collection_path, f"Title_{title}")
    if not os.path.exists(collection_path):
        os.makedirs(collection_path)

    # Fetch the TOC (Table of Contents) list
    toc_list = await get_title_dict()

    if title:
        title_url = f"{BASE_URL}NHTOC/nhtoc_ch{title}.htm"
        ack = await fetch_title(title, title_url)

        with connect_to_mongodb() as client:
            logging.info(f"Connected to {config['docdb']} database")
            db = client[config['docdb']]
            collection = db[config['collection_name']]

            # Check if title exists in MongoDB
            if (book := collection.find_one({"jx": 'NH', "titleNo": title, "isDeleted": {"$exists": False}})) is not None:
                task_id = book["taskId"]
                query = {"taskId": task_id}
                file_details = []

                for chapter_name, chapter_url in ack["chapters"].items():
                    chapter_data = await fetch_chapter(chapter_name, chapter_url, ack["title_name"], ack["directory"])
                    
                    if chapter_data:
                        # Extract Title Roman numeral and convert to Arabic
                        title_roman = ack["title_name"].split()[1]  # Extract "I", "II", etc.
                        try:
                            title_number = str(roman.fromRoman(title_roman))  # Convert to Arabic
                        except roman.InvalidRomanNumeralError:
                            title_number = title_roman  # Keep original if invalid

                        # Extract chapter number with suffixes (201, 201-A, 201-B)
                        chapter_match = re.search(r'CHAPTER (\d+[A-Z\-]*)', chapter_name, re.IGNORECASE)
                        chapter_number = chapter_match.group(1) if chapter_match else "Unknown"

                        # Generate filename (e.g., III_201.xml, III_201_A.xml)
                        filename = f"{title_number}_{chapter_number}.xml"

                        details = {
                            "Name": filename,
                            "collection": "true",
                            "common_conversion": "",
                            "mncr_conversion": "",
                            "meta": "",
                            "toc": "",
                            "type": config['NH_seclevel'],
                            "titleName": chapter_name,
                            "normCite": ""
                        }
                        file_details.append(details)

                        # Save to local storage
                        file_path = os.path.join(collection_path, filename)
                        with open(file_path, "w", encoding="utf-8") as file:
                            json.dump(chapter_data, file, indent=4)

                # Update MongoDB records
                collection.update_one(query, {"$set": {"fileDetail": file_details}})
                collection.update_one(query, {"$set": {"totalFiles": len(file_details), "finalStage": "Conversion"}})

                logging.info(f"Title {title} inserted into {config['collection_name']} collection")

            client.close()
            logging.info(f"Title {title} Conversion in progress")

            # Send conversion request
            conv_url = config['convert_request']
            payload = json.dumps({
                "data": {
                    "jx": "NH",
                    "createdBy": "",
                    "createdDate": datetime.now().strftime("%Y-%m-%d"),
                    "firstLeveno": f"{title}",
                    "firstLeveltitle": ""
                },
                "additionalParam": {
                    "convRawXm1": "yes",
                    "convMncrXm1": "string"
                }
            }, indent=4)

            headers = {'Content-Type': 'application/json'}
            logging.info(f"Payload {payload}")

            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(conv_url, headers=headers, data=payload) as response:
                        request_resp = await response.text()
                        logging.info(f"Conversion request sent for {title}")
            except Exception as e:
                logging.error(f"Conversion request failed for {title} {e}")

        return ack

    else:
        for title_num in toc_list.keys():
            title_url = f"{BASE_URL}NHTOC/nhtoc_ch{title_num}.htm"
            message = await fetch_title(title_num, title_url)
        return message



async def download_NH_input(url, base_url, title, download, collection_path):
    """Download and process NH legal statutes and store in MongoDB"""

    # Define and create the collection path
    collection_path = os.path.join(collection_path, f"Title_{title}")
    if not os.path.exists(collection_path):
        os.makedirs(collection_path)

    # Fetch the TOC (Table of Contents) list
    toc_list = await get_title_dict()

    if title:
        title_url = f"{BASE_URL}NHTOC/nhtoc_ch{title}.htm"
        ack = await fetch_title(title, title_url)

        with connect_to_mongodb() as client:
            logging.info(f"Connected to {config['docdb']} database")
            db = client[config['docdb']]
            collection = db[config['collection_name']]

            # Check if title exists in MongoDB
            if (book := collection.find_one({"jx": 'NH', "titleNo": title, "isDeleted": {"$exists": False}})) is not None:
                task_id = book["taskId"]
                query = {"taskId": task_id}
                file_details = []

                for chapter_name, chapter_url in ack["chapters"].items():
                    chapter_data = await fetch_chapter(chapter_name, chapter_url, ack["title_name"], ack["directory"])
                    
                    if chapter_data:
                        details = {
                            "Name": f"{title}_{chapter_name}.xml",
                            "collection": "true",
                            "common_conversion": "",
                            "mncr_conversion": "",
                            "meta": "",
                            "toc": "",
                            "type": config['NH_seclevel'],
                            "titleName": chapter_name,
                            "normCite": ""
                        }
                        file_details.append(details)

                        # Save to local storage
                        file_path = os.path.join(collection_path, f"{title}_{chapter_name}.xml")
                        with open(file_path, "w", encoding="utf-8") as file:
                            json.dump(chapter_data, file, indent=4)

                # Update MongoDB records
                collection.update_one(query, {"$set": {"fileDetail": file_details}})
                collection.update_one(query, {"$set": {"totalFiles": len(file_details), "finalStage": "Conversion"}})

                logging.info(f"Title {title} inserted into {config['collection_name']} collection")

            client.close()
            logging.info(f"Title {title} Conversion in progress")

            # Send conversion request
            conv_url = config['convert_request']
            payload = json.dumps({
                "data": {
                    "jx": "NH",
                    "createdBy": "",
                    "createdDate": datetime.now().strftime("%Y-%m-%d"),
                    "firstLeveno": f"{title}",
                    "firstLeveltitle": ""
                },
                "additionalParam": {
                    "convRawXm1": "yes",
                    "convMncrXm1": "string"
                }
            }, indent=4)

            headers = {'Content-Type': 'application/json'}
            logging.info(f"Payload {payload}")

            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(conv_url, headers=headers, data=payload) as response:
                        request_resp = await response.text()
                        logging.info(f"Conversion request sent for {title}")
            except Exception as e:
                logging.error(f"Conversion request failed for {title} {e}")

        return ack

    else:
        for title_num in toc_list.keys():
            title_url = f"{BASE_URL}NHTOC/nhtoc_ch{title_num}.htm"
            message = await fetch_title(title_num, title_url)
        return message
